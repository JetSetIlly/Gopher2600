package debugger

import (
	"strings"
)

// PrintProfile specifies the printing mode
type PrintProfile int

// enumeration of print profile types
const (
	// the following profiles ar generated as a result of the emulation
	CPUStep PrintProfile = iota
	VideoStep
	MachineInfo

	// the following profiles are generated by the debugger in response to user
	// input
	Feedback
	Prompt
	Script

	// user input (not used by all user interface types [eg. echoing terminals])
	Input

	// errors can be generated by the emulation or the debugger
	Error
)

// wrapper function for UserPrint(). useful for  normalising the input string
// before passing to the real UserPrint. it also allows us to easily obey
// directives such as the silent directive without passing the burden onto UI
// implementors
func (dbg Debugger) print(pp PrintProfile, s string, a ...interface{}) {
	if dbg.uiSilent && pp != Error {
		return
	}

	// trim *all* trailing newlines - UserPrint() will add newlines if required
	s = strings.TrimRight(s, "\n")

	dbg.ui.UserPrint(pp, s, a...)
}
