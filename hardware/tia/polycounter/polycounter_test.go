package polycounter_test

import (
	"gopher2600/hardware/tia/polycounter"
	"strings"
	"testing"
)

const correctSequence = "(0) 000000@0(0) 000000@1(0) 000000@2(0) 000000@3(1) 100000@0(1) 100000@1(1) 100000@2(1) 100000@3(2) 110000@0(2) 110000@1(2) 110000@2(2) 110000@3(3) 111000@0(3) 111000@1(3) 111000@2(3) 111000@3(4) 111100@0(4) 111100@1(4) 111100@2(4) 111100@3(5) 111110@0(5) 111110@1(5) 111110@2(5) 111110@3(6) 011111@0(6) 011111@1(6) 011111@2(6) 011111@3(7) 101111@0(7) 101111@1(7) 101111@2(7) 101111@3(8) 110111@0(8) 110111@1(8) 110111@2(8) 110111@3(9) 111011@0(9) 111011@1(9) 111011@2(9) 111011@3(10) 111101@0(10) 111101@1(10) 111101@2(10) 111101@3(11) 011110@0(11) 011110@1(11) 011110@2(11) 011110@3(12) 001111@0(12) 001111@1(12) 001111@2(12) 001111@3(13) 100111@0(13) 100111@1(13) 100111@2(13) 100111@3(14) 110011@0(14) 110011@1(14) 110011@2(14) 110011@3(15) 111001@0(15) 111001@1(15) 111001@2(15) 111001@3(16) 011100@0(16) 011100@1(16) 011100@2(16) 011100@3(17) 101110@0(17) 101110@1(17) 101110@2(17) 101110@3(18) 010111@0(18) 010111@1(18) 010111@2(18) 010111@3(19) 101011@0(19) 101011@1(19) 101011@2(19) 101011@3(20) 110101@0(20) 110101@1(20) 110101@2(20) 110101@3(21) 011010@0(21) 011010@1(21) 011010@2(21) 011010@3(22) 001101@0(22) 001101@1(22) 001101@2(22) 001101@3(23) 000110@0(23) 000110@1(23) 000110@2(23) 000110@3(24) 000011@0(24) 000011@1(24) 000011@2(24) 000011@3(25) 100001@0(25) 100001@1(25) 100001@2(25) 100001@3(26) 010000@0(26) 010000@1(26) 010000@2(26) 010000@3(27) 101000@0(27) 101000@1(27) 101000@2(27) 101000@3(28) 110100@0(28) 110100@1(28) 110100@2(28) 110100@3(29) 111010@0(29) 111010@1(29) 111010@2(29) 111010@3(30) 011101@0(30) 011101@1(30) 011101@2(30) 011101@3(31) 001110@0(31) 001110@1(31) 001110@2(31) 001110@3(32) 000111@0(32) 000111@1(32) 000111@2(32) 000111@3(33) 100011@0(33) 100011@1(33) 100011@2(33) 100011@3(34) 110001@0(34) 110001@1(34) 110001@2(34) 110001@3(35) 011000@0(35) 011000@1(35) 011000@2(35) 011000@3(36) 101100@0(36) 101100@1(36) 101100@2(36) 101100@3(37) 110110@0(37) 110110@1(37) 110110@2(37) 110110@3(38) 011011@0(38) 011011@1(38) 011011@2(38) 011011@3(39) 101101@0(39) 101101@1(39) 101101@2(39) 101101@3(40) 010110@0(40) 010110@1(40) 010110@2(40) 010110@3(41) 001011@0(41) 001011@1(41) 001011@2(41) 001011@3(42) 100101@0(42) 100101@1(42) 100101@2(42) 100101@3(43) 010010@0(43) 010010@1(43) 010010@2(43) 010010@3(44) 001001@0(44) 001001@1(44) 001001@2(44) 001001@3(45) 000100@0(45) 000100@1(45) 000100@2(45) 000100@3(46) 100010@0(46) 100010@1(46) 100010@2(46) 100010@3(47) 010001@0(47) 010001@1(47) 010001@2(47) 010001@3(48) 001000@0(48) 001000@1(48) 001000@2(48) 001000@3(49) 100100@0(49) 100100@1(49) 100100@2(49) 100100@3(50) 110010@0(50) 110010@1(50) 110010@2(50) 110010@3(51) 011001@0(51) 011001@1(51) 011001@2(51) 011001@3(52) 001100@0(52) 001100@1(52) 001100@2(52) 001100@3(53) 100110@0(53) 100110@1(53) 100110@2(53) 100110@3(54) 010011@0(54) 010011@1(54) 010011@2(54) 010011@3(55) 101001@0(55) 101001@1(55) 101001@2(55) 101001@3(56) 010100@0(56) 010100@1(56) 010100@2(56) 010100@3(57) 101010@0(57) 101010@1(57) 101010@2(57) 101010@3(58) 010101@0(58) 010101@1(58) 010101@2(58) 010101@3(59) 001010@0(59) 001010@1(59) 001010@2(59) 001010@3(60) 000101@0(60) 000101@1(60) 000101@2(60) 000101@3(61) 000010@0(61) 000010@1(61) 000010@2(61) 000010@3(62) 000001@0(62) 000001@1(62) 000001@2(62) 000001@3(63) 111111@0(63) 111111@1(63) 111111@2(63) 111111@3"

func TestPolycounter(t *testing.T) {
	pk := polycounter.New6Bit()
	pk.SetResetPattern("111111")

	s := strings.Builder{}
	s.WriteString(pk.String())
	for pk.Tick() == false {
		s.WriteString(pk.String())
	}
	if s.String() != correctSequence {
		t.Fatalf("polycounter sequence has failed")
	}
}
