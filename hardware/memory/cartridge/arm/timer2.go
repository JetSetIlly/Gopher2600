// This file is part of Gopher2600.
//
// Gopher2600 is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Gopher2600 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Gopher2600.  If not, see <https://www.gnu.org/licenses/>.

package arm

import (
	"github.com/jetsetilly/gopher2600/logger"
)

// the operation of the TIMx units in STM32 ARM packages can be found in the
// STM32 reference manual:
//
// https://www.st.com/resource/en/reference_manual/dm00031020-stm32f405-415-stm32f407-417-stm32f427-437-and-stm32f429-439-advanced-arm-based-32-bit-mcus-stmicroelectronics.pdf

type timer2 struct {
	// current register values
	control    uint16
	prescaler  uint16
	autoreload uint32
	counter    uint32
	status     uint16

	// extracted control register flags
	active              bool // CEN
	downcounting        bool // DIR
	updateEventDisabled bool // UDIS
	updateRequestSource bool // URS - not a flag but only two options for the "source"
	autoReloadBuffered  bool // ARPE

	// the autoreload shadow register is updated from the autoreload register
	// when:
	// 1) the autoreload register is written to AND autoReloadBuffered is false
	// 2) at an update event
	autoreloadShadow uint32

	// prescalarShadow is the prescaler register value that is being used
	// currently. the prescaler register can change but the prescalerCounter
	// will still be ticking towards the prescalarShadow value
	prescalarShadow  uint16
	prescalerCounter uint16

	fractionalCounter float32
}

func (t *timer2) reset() {
	t.setControlRegister(0x00000000)
	t.prescaler = 0x0
	t.autoreload = 0xffffffff
	t.counter = 0.0
}

func (t *timer2) setControlRegister(val uint32) {
	t.control = uint16(val)
	t.active = val&0x0001 == 0x0001
	t.updateEventDisabled = val&0x0002 == 0x0002
	t.updateRequestSource = val&0x0004 == 0x0004
	t.downcounting = val&0x0010 == 0x0010
	t.autoReloadBuffered = val&0x0040 == 0x0040

	if val&0x0060 != 0x0000 {
		panic("ARM TIM2_CR1: only CMS bits of 00 (edge-aligned mode) supported")
	}
	if val&0x0008 != 0x0000 {
		panic("ARM TIM2_CR1: only OMP bit of 0 supported")
	}
	if val&0x0300 != 0x0000 {
		panic("ARM TIM2_CR1: only CKD bits of 000 (no clock division) is supported")
	}
	if val&0xfc00 != 0x0000 {
		panic("ARM TIM2_CR1: reserved bits are not zero")
	}
}

func (t *timer2) stepFromVCS(armClock float32, vcsClock float32) {
	// the ARM timer ticks forward once every ARM cycle. the best we can do to
	// accommodate this is to tick the counter forward by the the appropriate
	// fraction every VCS cycle. Put another way: an NTSC spec VCS, for
	// example, will tick forward every 58-59 ARM cycles.

	t.step(armClock / vcsClock)
}

func (t *timer2) step(cycles float32) {
	if !t.active {
		return
	}

	// accumulate remaining fractions of previous step and note the new
	// remaining fractions value
	cycles += t.fractionalCounter
	t.fractionalCounter = cycles - float32(int(cycles))

	// number of counter ticks required
	t.prescalerCounter += uint16(cycles)

	counterTicks := 0
	for t.prescalerCounter > t.prescalarShadow {
		counterTicks++
		t.prescalerCounter -= t.prescalarShadow
	}

	if counterTicks == 0 {
		return
	}

	if t.downcounting {
		c := t.counter - uint32(counterTicks)

		if c == 0 || c > t.counter {
			// counter overflow
			t.updateEvent(true)
		} else {
			t.counter = c
		}
	} else {
		c := t.counter + uint32(counterTicks)

		if c >= t.autoreload || c < t.counter {
			// counter overflow
			t.updateEvent(true)
		} else {
			t.counter = c
		}
	}
}

func (t *timer2) updateEvent(fromCounter bool) {
	if !t.updateEventDisabled {
		t.prescalarShadow = t.prescaler
		t.autoreloadShadow = t.autoreload

		// set update interupt flag of status register
		t.status |= 0x0001
	}

	// reset of the counters occurs even when updateEventDisable is true. this
	// seems to be the case because at the bottom of page 592 of the "STM32
	// reference" we read:
	//
	// "... no update event occurs until the UDIS bit has been written to 0. However,
	// the counter restarts from 0 ..."
	//
	// but this is in the context of explaining what happens when a counter
	// expires, so we limit the reset to when the update events is generated by
	// a counter tick
	if fromCounter {
		if t.downcounting {
			t.counter = t.autoreloadShadow
		} else {
			t.counter = 0
		}
		t.prescalerCounter = 0
	}
}

// "18.4.21 TIMx register map" of "RM0090 reference"

func (t *timer2) write(addr uint32, val uint32) (bool, string) {
	switch addr {
	case 0x40000000:
		// TIMx Control
		t.setControlRegister(val)
	case 0x40000014:
		// TIMx Event Generation
		v := uint16(val)

		// Bit 0 UG Update Generation
		if v&0x0001 == 0x0001 {
			if !t.updateRequestSource {
				t.updateEvent(false)
			}
		}
		if v&0x005e != 0x0000 {
			panic("ARM TIM2_EGR: only setting UG bit of this register is supported")
		}
		if val&0xffa0 != 0x0000 {
			panic("ARM TIM2_EGR: reserved bits are not zero")
		}
	case 0x40000024:
		// TIMx Counter
		t.counter = val
	case 0x40000028:
		// TIMx Prescalar
		t.prescaler = uint16(val)
	case 0x4000002c:
		// TIMx Autoload
		t.autoreload = val

		// copy autoreload value to shadow immediately if autoReloadBuffered is false
		if !t.autoReloadBuffered {
			t.autoreloadShadow = t.autoreload
		}
	case 0x40000030:
		// reserved
		logger.Logf("ARM7", "TIM2 reserved address (%#08x) written with value (%08x)", addr, val)
	default:
		return false, ""
	}
	return true, ""
}

func (t *timer2) read(addr uint32) (uint32, bool, string) {
	var val uint32

	switch addr {
	case 0x40000000:
		// TIMx Control register
		val = uint32(t.control)
	case 0x40000024:
		// TIMx Counter
		val = t.counter
	default:
		return 0, false, ""
	}

	return val, true, ""
}
