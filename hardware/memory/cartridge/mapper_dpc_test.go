// This file is part of Gopher2600.
//
// Gopher2600 is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Gopher2600 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Gopher2600.  If not, see <https://www.gnu.org/licenses/>.

package cartridge

import (
	"testing"

	"github.com/jetsetilly/gopher2600/cartridgeloader"
	"github.com/jetsetilly/gopher2600/properties"
	"github.com/jetsetilly/gopher2600/test"
)

// I tend to use md5 hashes in the gopher2600 project but in this test I am
// using crc32 hashes to avoid confusion in relation to issue #36
//
// https://github.com/JetSetIlly/Gopher2600/issues/36
//
// in both test cases below, the data is from the ROM file from offset 0x2800 to
// the end of file. in the case of b960c29e the file is one byte longer

var dpcRNG_097ce7ad = []byte{
	0x00, 0x01, 0x03, 0x07, 0x0f, 0x1e, 0x3d, 0x7a, 0xf4, 0xe8, 0xd0, 0xa1, 0x43, 0x87, 0x0e, 0x1c,
	0x39, 0x72, 0xe5, 0xcb, 0x97, 0x2f, 0x5f, 0xbf, 0x7f, 0xfe, 0xfd, 0xfb, 0xf7, 0xee, 0xdc, 0xb8,
	0x71, 0xe3, 0xc7, 0x8e, 0x1d, 0x3b, 0x76, 0xed, 0xda, 0xb4, 0x68, 0xd1, 0xa3, 0x47, 0x8f, 0x1f,
	0x3f, 0x7e, 0xfc, 0xf9, 0xf3, 0xe6, 0xcd, 0x9b, 0x36, 0x6d, 0xdb, 0xb6, 0x6c, 0xd9, 0xb2, 0x64,
	0xc8, 0x91, 0x23, 0x46, 0x8d, 0x1b, 0x37, 0x6f, 0xdf, 0xbe, 0x7d, 0xfa, 0xf5, 0xea, 0xd4, 0xa9,
	0x52, 0xa4, 0x49, 0x92, 0x25, 0x4a, 0x94, 0x29, 0x53, 0xa6, 0x4d, 0x9a, 0x34, 0x69, 0xd3, 0xa7,
	0x4f, 0x9e, 0x3c, 0x78, 0xf0, 0xe0, 0xc1, 0x82, 0x04, 0x09, 0x12, 0x24, 0x48, 0x90, 0x21, 0x42,
	0x85, 0x0a, 0x14, 0x28, 0x51, 0xa2, 0x45, 0x8b, 0x17, 0x2e, 0x5d, 0xbb, 0x77, 0xef, 0xde, 0xbc,
	0x79, 0xf2, 0xe4, 0xc9, 0x93, 0x27, 0x4e, 0x9c, 0x38, 0x70, 0xe1, 0xc3, 0x86, 0x0c, 0x18, 0x31,
	0x63, 0xc6, 0x8c, 0x19, 0x33, 0x67, 0xce, 0x9d, 0x3a, 0x74, 0xe9, 0xd2, 0xa5, 0x4b, 0x96, 0x2d,
	0x5b, 0xb7, 0x6e, 0xdd, 0xba, 0x75, 0xeb, 0xd6, 0xad, 0x5a, 0xb5, 0x6a, 0xd5, 0xab, 0x56, 0xac,
	0x58, 0xb1, 0x62, 0xc4, 0x88, 0x11, 0x22, 0x44, 0x89, 0x13, 0x26, 0x4c, 0x98, 0x30, 0x61, 0xc2,
	0x84, 0x08, 0x10, 0x20, 0x40, 0x81, 0x02, 0x05, 0x0b, 0x16, 0x2c, 0x59, 0xb3, 0x66, 0xcc, 0x99,
	0x32, 0x65, 0xca, 0x95, 0x2b, 0x57, 0xae, 0x5c, 0xb9, 0x73, 0xe7, 0xcf, 0x9f, 0x3e, 0x7c, 0xf8,
	0xf1, 0xe2, 0xc5, 0x8a, 0x15, 0x2a, 0x55, 0xaa, 0x54, 0xa8, 0x50, 0xa0, 0x41, 0x83, 0x06, 0x0d,
	0x1a, 0x35, 0x6b, 0xd7, 0xaf, 0x5e, 0xbd, 0x7b, 0xf6, 0xec, 0xd8, 0xb0, 0x60, 0xc0, 0x80, 0x0a,
}

var dpcRNG_b960c29e = []byte{
	0x00, 0x01, 0x03, 0x07, 0x0f, 0x1e, 0x3d, 0x7a, 0xf4, 0xe8, 0xd0, 0xa1, 0x43, 0x87, 0x0e, 0x1c,
	0x39, 0x72, 0xe5, 0xcb, 0x97, 0x2f, 0x5f, 0xbf, 0x7f, 0xfe, 0xfd, 0xfb, 0xf7, 0xee, 0xdc, 0xb8,
	0x71, 0xe3, 0xc7, 0x8e, 0x1d, 0x3b, 0x76, 0xed, 0xda, 0xb4, 0x68, 0xd1, 0xa3, 0x47, 0x8f, 0x1f,
	0x3f, 0x7e, 0xfc, 0xf9, 0xf3, 0xe6, 0xcd, 0x9b, 0x36, 0x6d, 0xdb, 0xb6, 0x6c, 0xd9, 0xb2, 0x64,
	0xc8, 0x91, 0x23, 0x46, 0x8d, 0x1b, 0x37, 0x6f, 0xdf, 0xbe, 0x7d, 0xfa, 0xf5, 0xea, 0xd4, 0xa9,
	0x52, 0xa4, 0x49, 0x92, 0x25, 0x4a, 0x94, 0x29, 0x53, 0xa6, 0x4d, 0x9a, 0x34, 0x69, 0xd3, 0xa7,
	0x4f, 0x9e, 0x3c, 0x78, 0xf0, 0xe0, 0xc1, 0x82, 0x04, 0x09, 0x12, 0x24, 0x48, 0x90, 0x21, 0x42,
	0x85, 0x0a, 0x14, 0x28, 0x51, 0xa2, 0x45, 0x8b, 0x17, 0x2e, 0x5d, 0xbb, 0x77, 0xef, 0xde, 0xbc,
	0x79, 0xf2, 0xe4, 0xc9, 0x93, 0x27, 0x4e, 0x9c, 0x38, 0x70, 0xe1, 0xc3, 0x86, 0x0c, 0x18, 0x31,
	0x63, 0xc6, 0x8c, 0x19, 0x33, 0x67, 0xce, 0x9d, 0x3a, 0x74, 0xe9, 0xd2, 0xa5, 0x4b, 0x96, 0x2d,
	0x5b, 0xb7, 0x6e, 0xdd, 0xba, 0x75, 0xeb, 0xd6, 0xad, 0x5a, 0xb5, 0x6a, 0xd5, 0xab, 0x56, 0xac,
	0x58, 0xb1, 0x62, 0xc4, 0x88, 0x11, 0x22, 0x44, 0x89, 0x13, 0x26, 0x4c, 0x98, 0x30, 0x61, 0xc2,
	0x84, 0x08, 0x10, 0x20, 0x40, 0x81, 0x02, 0x05, 0x0b, 0x16, 0x2c, 0x59, 0xb3, 0x66, 0xcc, 0x99,
	0x32, 0x65, 0xca, 0x95, 0x2b, 0x57, 0xae, 0x5c, 0xb9, 0x73, 0xe7, 0xcf, 0x9f, 0x3e, 0x7c, 0xf8,
	0xf1, 0xe2, 0xc5, 0x8a, 0x15, 0x2a, 0x55, 0xaa, 0x54, 0xa8, 0x50, 0xa0, 0x41, 0x83, 0x06, 0x0d,
	0x1a, 0x35, 0x6b, 0xd7, 0xaf, 0x5e, 0xbd, 0x7b, 0xf6, 0xec, 0xd8, 0xb0, 0x60, 0xc0, 0x80, 0xfd,
	0x0a,
}

func TestDPCRNG(t *testing.T) {
	// create an empty file and load it as a DPC cartridge. the file is empty
	// but that doesn't matter for our purposes because we'll be testing the
	// RNG directly
	ld, err := cartridgeloader.NewLoaderFromData("dpc_test", make([]byte, 10240), "DPC", "", properties.Properties{})
	test.ExpectSuccess(t, err)
	cart, err := newDPC(nil, ld)
	test.ExpectSuccess(t, err)

	// test initial sequence
	cart.state.registers.reset(nil)
	test.ExpectEquality(t, cart.state.registers.RNG, 0)
	cart.rngPump()
	test.ExpectEquality(t, cart.state.registers.RNG, 1)
	cart.rngPump()
	test.ExpectEquality(t, cart.state.registers.RNG, 3)
	cart.rngPump()
	test.ExpectEquality(t, cart.state.registers.RNG, 7)

	// 0x80 is the last number in the sequence. test wrap around to 0x00
	cart.state.registers.RNG = 0x80
	cart.rngPump()
	test.ExpectEquality(t, cart.state.registers.RNG, 0)

	// 0xff is an impossible number in the RNG. if the RNG register ever finds
	// itself in that state it will forever return 0xff
	cart.state.registers.RNG = 0xff
	cart.rngPump()
	test.ExpectEquality(t, cart.state.registers.RNG, 0xff)
	cart.rngPump()
	test.ExpectEquality(t, cart.state.registers.RNG, 0xff)
	cart.rngPump()
	test.ExpectEquality(t, cart.state.registers.RNG, 0xff)

	// test Pitfall2 dump with crc32 097ce7ad
	cart.state.registers.reset(nil)
	test.ExpectEquality(t, cart.state.registers.RNG, 0)

	for i, v := range dpcRNG_097ce7ad[:255] {
		if !test.ExpectEquality(t, cart.state.registers.RNG, v) {
			t.Logf("index: %d", i)
		}
		cart.rngPump()
	}

	// test Pitfall2 dump with crc32 b960c29e
	cart.state.registers.reset(nil)
	test.ExpectEquality(t, cart.state.registers.RNG, 0)

	for i, v := range dpcRNG_b960c29e[:255] {
		if !test.ExpectEquality(t, cart.state.registers.RNG, v) {
			t.Logf("index: %d", i)
		}
		cart.rngPump()
	}

	// both dumps end with a byte of 0x0a which isn't part of the random number
	// sequence. the dump with crc32 hash b960c29e however, has an additional
	// byte between the wrap-around value 0x80 and the end byte 0x0a
	test.ExpectEquality(t, cart.state.registers.RNG, 0)
	test.ExpectInequality(t, cart.state.registers.RNG, dpcRNG_b960c29e[255])
}

// test that each value in the sequence is seen only once and that value 0xff is never seen
func TestDPCRNG_Distribution(t *testing.T) {
	// create an empty file and load it as a DPC cartridge. the file is empty
	// but that doesn't matter for our purposes because we'll be testing the
	// RNG directly
	ld, err := cartridgeloader.NewLoaderFromData("dpc_test", make([]byte, 10240), "DPC", "", properties.Properties{})
	test.ExpectSuccess(t, err)
	cart, err := newDPC(nil, ld)
	test.ExpectSuccess(t, err)

	// make sure we're starting at the beginning of the sequence
	cart.state.registers.reset(nil)
	test.ExpectEquality(t, cart.state.registers.RNG, 0)

	// count number of occurances of each number in the sequence
	var count [255]int

	for i := range 255 {
		test.ExpectInequality(t, cart.state.registers.RNG, 0xff)
		count[i]++
		cart.rngPump()
	}

	// the loop should finish on the wrap-around value of zero
	test.ExpectEquality(t, cart.state.registers.RNG, 0)

	// each value in count array should be one
	for _, v := range count {
		test.ExpectEquality(t, v, 1)
	}
}
